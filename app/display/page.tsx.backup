"use client";

import { useState, useEffect, useMemo, useCallback, Suspense } from "react";
import { useSearchParams } from "next/navigation";
import { motion, AnimatePresence } from "framer-motion";
import Image from "next/image";
import { getPagings } from "../utils/api";

import ClientOnly from "../components/ClientOnly";
import TextType from "../components/TextType";

function PagingScreenContent() {
  const searchParams = useSearchParams();
  const beltNo = useMemo(() => searchParams.get("belt_no"), [searchParams]);

  const [sqCode, setSqCode] = useState("");
  const [names, setNames] = useState<string[]>([]);
  const [freeText, setFreeText] = useState("");
  const [handleBy, setHandleBy] = useState("Jas");
  const [currentTime, setCurrentTime] = useState("00:00");
  const [currentDate, setCurrentDate] = useState("Loading...");
  const [isClient, setIsClient] = useState(false);
  const [currentPage, setCurrentPage] = useState(0);

  // Define types for API response
  interface PagingItem {
    belt_no: string | number;
    flight_no?: string;
    name_passenger?: string;
    handle_by?: string;
    free_text?: string;
    status?: number;
    [key: string]: unknown;
  }

  // Helper fetcher with useCallback to prevent recreation on each render
  const fetchData = useCallback(async () => {
    if (!beltNo) return;
    const allPagings = await getPagings();

    // Filter by belt_no and status=1 (only show data with status 1)
    const filtered = (allPagings || []).filter(
      (p: PagingItem) => String(p.belt_no) === String(beltNo) && p.status === 1
    );

    if (Array.isArray(filtered) && filtered.length > 0) {
      setSqCode(filtered[0].flight_no || "");
      setFreeText(filtered[0].free_text || "");
      setHandleBy(filtered[0].handle_by || "Jas");
      const passengerNames = filtered
        .flatMap((item: PagingItem) =>
          String(item.name_passenger || "").split(",")
        )
        .map((n: string) => n.trim())
        .filter(Boolean);
      setNames(passengerNames);
    } else {
      // If we have beltNo but no filtered data (nothing with status 1),
      // try to get the free_text from any record with this belt_no
      const anyBeltData = (allPagings || []).filter(
        (p: PagingItem) => String(p.belt_no) === String(beltNo)
      );

      if (anyBeltData.length > 0) {
        setFreeText(anyBeltData[0].free_text || "");
        setHandleBy(anyBeltData[0].handle_by || "Jas");
      } else {
        setFreeText("");
        setHandleBy("Jas");
      }

      setSqCode("");
      setNames([]);
    }
  }, [beltNo]);

  // Fetch sekali ketika beltNo berubah
  useEffect(() => {
    fetchData();
  }, [fetchData]);

  // Set client-side flag and initialize time
  useEffect(() => {
    setIsClient(true);
    updateTimeAndDate();

    // Update time every second
    const interval = setInterval(updateTimeAndDate, 1000);
    return () => clearInterval(interval);
  }, []);

  // Function to update time and date
  const updateTimeAndDate = () => {
    const now = new Date();
    setCurrentTime(
      now.toLocaleTimeString([], {
        hour: "2-digit",
        minute: "2-digit",
      })
    );
    setCurrentDate(
      now.toLocaleDateString("en-ID", {
        day: "numeric",
        month: "short",
        year: "numeric",
      })
    );
  };

  // Polling untuk auto refresh ketika data berubah di server
  useEffect(() => {
    if (!beltNo) return;
    let isActive = true;
    const intervalId = setInterval(() => {
      if (!isActive) return;
      fetchData();
    }, 1000); // refresh tiap 1 detik
    return () => {
      isActive = false;
      clearInterval(intervalId);
    };
  }, [beltNo, fetchData]);

  // Auto-change untuk passenger names (maksimal 4 per halaman)
  useEffect(() => {
    if (names.length <= 4) {
      setCurrentPage(0);
      return;
    }

    const totalPages = Math.ceil(names.length / 4);
    const intervalId = setInterval(() => {
      setCurrentPage((prev) => (prev + 1) % totalPages);
    }, 5000); // ganti halaman setiap 5 detik

    return () => clearInterval(intervalId);
  }, [names.length]);

  // Get current page passengers
  const getCurrentPagePassengers = () => {
    if (names.length <= 4) return names;
    const startIndex = currentPage * 4;
    return names.slice(startIndex, startIndex + 4);
  };

  return (
    <div
      className="relative h-screen w-screen flex flex-col overflow-hidden"
      style={{
        background:
          "linear-gradient(rgba(147, 197, 253, 0.7), rgba(147, 197, 253, 0.7))",
          // "linear-gradient(rgba(147, 197, 253, 0.7), rgba(147, 197, 253, 0.7)), url(/airport_building.png)",
        backgroundSize: "cover",
        backgroundPosition: "center",
        backgroundRepeat: "no-repeat",
        backgroundAttachment: "fixed",
      }}
    >
      {/* Background overlay for better text readability */}
      <div className="absolute inset-0 bg-gradient-to-b from-blue-600/30 via-blue-500/20 to-blue-100/30"></div>

      {/* Main Content */}
      <div className="relative z-10 flex flex-col h-full">
        {/* Header with Belt Number */}
        <div className="flex justify-between items-start p-8 relative">
          {/* Belt Number - Left */}
          <div className="flex items-start space-x-8">
            <div className="text-white">
              <div className="text-6xl font-bold">Belt</div>
              <div className="text-6xl font-bold">No.</div>
            </div>
            <div className="text-9xl font-bold text-white flex items-center">
              {beltNo || "1"}
            </div>
          </div>

          {/* Right - Airport Building Graphic */}
          <div
            className="absolute top-0 right-0"
            style={{ height: "calc(100% - 6px)" }}
          >
            <div className="relative h-full">
              {/* Airport Building Silhouette */}
              <div
                className="w-80 h-full opacity-60"
                style={{
                  background:
                    "linear-gradient(45deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0.3) 100%)",
                  clipPath: "polygon(0% 100%, 30% 0%, 100% 0%, 100% 100%)",
                }}
              ></div>

              {/* JAS Logo in center of triangle area */}
              <div className="absolute top-1/3 right-10">
                <Image
                  src="/Logo_JAS.png"
                  alt="JAS Airways Logo"
                  width={180}
                  height={90}
                  className="object-contain"
                />
              </div>
            </div>
          </div>
        </div>

        {/* Divider Line */}
        <div className="w-full border-t-2 border-white/30 -mt-2"></div>

        {/* Flight Information Section */}
        <div className="flex-1 flex items-start justify-center px-4 pt-8">
          <div className="w-full">
            {/* Flight Data Table - No Card */}
            {names.length > 0 ? (
              <div className="w-full">
                {/* Table Header */}
                <div className="flex items-center py-8 mb-2 px-12">
                  <div className="w-48 flex items-center justify-start">
                    <div className="text-6xl font-bold text-white">AIRLINE</div>
                  </div>
                  <div className="text-6xl font-bold text-white flex-1 text-center">
                    FLIGHT
                  </div>
                  <div className="text-6xl font-bold text-white flex-1 text-center">
                    PASSENGER
                  </div>
                </div>

                {/* Table Data with Fade Animation */}
                <div className="space-y-6">
                  <AnimatePresence mode="wait">
                    <motion.div
                      key={currentPage}
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      exit={{ opacity: 0 }}
                      transition={{ duration: 0.5 }}
                    >
                      {getCurrentPagePassengers().map((name, idx) => (
                        <div
                          key={`${currentPage}-${idx}`}
                          className="flex items-center py-6 px-12"
                        >
                          {/* Airline Logo */}
                          <div className="w-48 flex items-center justify-start">
                            <Image
                              src={`/airline/${sqCode.substring(0, 2)}.png`}
                              alt={`${sqCode.substring(0, 2)} Logo`}
                              width={180}
                              height={90}
                              className="object-contain"
                              onError={(e) => {
                                const target = e.target as HTMLImageElement;
                                target.style.display = "none";
                              }}
                            />
                          </div>

                          {/* Flight Number */}
                          <div className="text-6xl font-bold text-white flex-1 text-center">
                            {sqCode}
                          </div>

                          {/* Passenger Name */}
                          <div className="text-6xl font-medium text-white flex-1 text-center">
                            {name}
                          </div>
                        </div>
                      ))}
                    </motion.div>
                  </AnimatePresence>
                </div>
              </div>
            ) : freeText ? (
              <div className="absolute inset-0 flex items-center justify-center pt-28">
                <div className="text-center">
                  <TextType
                    text={freeText}
                    typingSpeed={100}
                    pauseDuration={2000}
                    deletingSpeed={50}
                    showCursor={true}
                    cursorCharacter="|"
                    loop={true}
                    noDelete={true}
                    className="text-6xl font-bold text-white"
                  />
                </div>
              </div>
            ) : (
              <div className="absolute inset-0 flex items-center justify-center pt-28">
                <div className="text-center">
                  <div className="text-6xl font-bold text-white">
                    NO FLIGHT INFORMATION
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Running Text Footer */}
        <div className="fixed bottom-0 left-0 right-0 z-50 py-4 overflow-hidden bg-blue-200/80 backdrop-blur-sm border-t border-white/30">
          <div className="relative w-full h-12 flex items-center overflow-hidden">
            <div className="whitespace-nowrap flex items-center animate-marquee">
              {/* English Message */}
              <span className="text-2xl md:text-3xl text-blue-900 font-bold whitespace-nowrap mr-16">
                PLEASE REPORT TO {handleBy?.toUpperCase() || "JAS"} BAGGAGE
                SERVICES COUNTER{" "}
                {beltNo
                  ? `IN FRONT OF BELT 1`
                  : "AT ARRIVAL HALL INFORMATION COUNTER"}{" "}
                OR APPROACH OUR GROUND STAFF FOR ASSISTANCE
              </span>
              {/* Separator */}
              <span className="text-blue-700 text-3xl mr-16">|</span>
              {/* Indonesian Message */}
              <span className="text-2xl md:text-3xl text-blue-900 font-bold whitespace-nowrap mr-16">
                HARAP MELAPOR KE KONTER LAYANAN BAGASI{" "}
                {handleBy?.toUpperCase() || "JAS"}{" "}
                {beltNo
                  ? `DI DEPAN BELT 1`
                  : "DI KONTER INFORMASI HALL KEDATANGAN"}{" "}
                ATAU HUBUNGI STAF DARAT KAMI UNTUK BANTUAN
              </span>
              {/* Separator */}
              <span className="text-blue-700 text-3xl mr-16">|</span>
              {/* Repeat the messages for seamless marquee */}
              <span className="text-2xl md:text-3xl text-blue-900 font-bold whitespace-nowrap mr-16">
                PLEASE REPORT TO {handleBy?.toUpperCase() || "JAS"} BAGGAGE
                SERVICES COUNTER{" "}
                {beltNo
                  ? `IN FRONT OF BELT 1`
                  : "AT ARRIVAL HALL INFORMATION COUNTER"}{" "}
                OR APPROACH OUR GROUND STAFF FOR ASSISTANCE
              </span>
              <span className="text-blue-700 text-3xl mr-16">|</span>
              <span className="text-2xl md:text-3xl text-blue-900 font-bold whitespace-nowrap mr-16">
                HARAP MELAPOR KE KONTER LAYANAN BAGASI{" "}
                {handleBy?.toUpperCase() || "JAS"}{" "}
                {beltNo
                  ? `DI DEPAN BELT 1`
                  : "DI KONTER INFORMASI HALL KEDATANGAN"}{" "}
                ATAU HUBUNGI STAF DARAT KAMI UNTUK BANTUAN
              </span>
              <span className="text-blue-700 text-3xl mr-16">|</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default function PagingScreen() {
  return (
    <Suspense
      fallback={
        <div className="min-h-screen bg-gradient-to-b from-blue-600 to-blue-100 flex items-center justify-center text-white">
          Loading...
        </div>
      }
    >
      <PagingScreenContent />
    </Suspense>
  );
}
